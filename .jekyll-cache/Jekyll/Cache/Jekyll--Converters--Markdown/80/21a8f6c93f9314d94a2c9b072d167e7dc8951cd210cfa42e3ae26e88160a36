I"Ô<h2 id="aloca√ß√£o-de-mem√≥ria-principal">Aloca√ß√£o de mem√≥ria principal</h2>

<p><strong>Objetivo:</strong> Simular e avaliar diferentes t√©cnicas de aloca√ß√£o/libera√ß√£o de mem√≥ria: first fit, best fit, worst fit.  Usando lista encadeada para gerenciamento de mem√≥ria.</p>

<p>Suponha que a mem√≥ria seja de 256 KB e esteja dividida em unidades de 2 KB cada. Um processo pode solicitar entre 3 e 10 unidades de mem√≥ria. Sua simula√ß√£o consiste em tr√™s componentes: <strong>componente de mem√≥ria</strong> que implementa uma aloca√ß√£o/libera√ß√£o espec√≠fica por t√©cnica; <strong>componente de gera√ß√£o de solicita√ß√£o</strong> que gera solicita√ß√µes de aloca√ß√£o/libera√ß√£o; e <strong>componente de relat√≥rio</strong> de estat√≠sticas que imprime as estat√≠sticas relevantes.</p>

<p>A <strong>componente de mem√≥ria</strong> exporta as seguintes fun√ß√µes:</p>
<ul>
  <li>
    <p><code class="highlighter-rouge">int alocate_mem(int process_id, int num_units)</code>: aloca <em>num_units</em> unidades de mem√≥ria para um processo cujo id √© <em>process_id</em>. Se for bem sucedido, retorna 1. Caso contr√°rio, retorna -1.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">int deallocate_mem(int process_id)</code>: desaloca a mem√≥ria alocada para o processo cujo id √© <em>process_id</em>. Ele retorna 1, se for bem-sucedido, caso contr√°rio, -1.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">int fragment_count()</code>: retorna o n√∫mero de buracos (fragmentos de tamanhos 1 ou 2 unidades).</p>
  </li>
</ul>

<p>Voc√™ implementar√° um componente de mem√≥ria separado para cada mem√≥ria t√©cnica de aloca√ß√£o/libera√ß√£o. Para solicita√ß√µes de aloca√ß√£o, o componente especifica o id do processo do processo para o qual a mem√≥ria √© solicitada, bem como o n√∫mero de unidades de mem√≥ria sendo solicitada. Para esta simula√ß√£o, suponha que a mem√≥ria seja solicitada para cada processo apenas uma vez. Para solicita√ß√µes de desaloca√ß√£o, o componente especifica o id do processo do processo cuja mem√≥ria deve ser desalocada. Para esta simula√ß√£o, suponha que todo o a mem√≥ria alocada para um processo √© desalocada em um request de desaloca√ß√£o. Voc√™ pode gerar essas solicita√ß√µes com base em alguns crit√©rios espec√≠ficos, por exemplo, ao acaso ou de uma mem√≥ria rastreamento de aloca√ß√£o/desaloca√ß√£o obtido de alguma fonte.</p>

<p>Existem tr√™s par√¢metros de desempenho que sua simula√ß√£o deve calcular para cada
t√©cnica: n√∫mero m√©dio de fragmentos externos, tempo m√©dio de aloca√ß√£o em termos de n√∫mero m√©dio de n√≥s percorridos na aloca√ß√£o, e a porcentagem de vezes que um pedido de aloca√ß√£o negado.</p>

<p>Gere 10.000 solicita√ß√µes usando o <strong>componente de gera√ß√£o de solicita√ß√£o</strong> e, para cada solicita√ß√£o, invocar a fun√ß√£o apropriada do componente de mem√≥ria para cada uma das t√©cnica de aloca√ß√£o/libera√ß√£o. Ap√≥s cada solicita√ß√£o, atualize as tr√™s performances par√¢metros para cada uma das t√©cnicas.</p>

<p>O <strong>componente de relat√≥rio de estat√≠sticas</strong> imprime o valor dos tr√™s par√¢metros para todos os quatro t√©cnicas no final.</p>

<p>Entregar o relat√≥rio final de compara√ß√£o entre as t√©cnicas utilizadas, juntamente com uma avalia√ß√£o cr√≠tica desse resultado.</p>
:ET