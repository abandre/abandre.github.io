I"â <h2 id="m√≥dulos-do-kernel-no-linux">M√≥dulos do Kernel no Linux</h2>

<p>Vimos em aula que m√≥dulos s√£o arquivos-objeto, parte do kernel, que s√£o vinculados a ele em tempo de execu√ß√£o.</p>

<p>Um m√≥dulo no linux √© um c√≥digo, geralmente drivers de dispositivos que podem ser carregados e descarregados sem a necessidade de reiniciar o sistema.</p>

<p>Os m√≥dulos podem ser inseridos e removidos em um kernel em execu√ß√£o a qualquer tempo, exceto quando em uso.</p>

<p>Os arquivos de drivers geralmente terminam com a extens√£o .ko (ou .o) e s√£o armazenados em subdiret√≥rios dentro de /lib/modules</p>

<h3 id="comandos-para-gerenciamento-de-m√≥dulos">Comandos para Gerenciamento de M√≥dulos</h3>

<ul>
  <li><code class="highlighter-rouge">depmod</code> - Trabalha com depend√™ncias dos m√≥dulos</li>
  <li><code class="highlighter-rouge">insmod</code> - Carrega m√≥dulos em um kernel em execu√ß√£o</li>
  <li><code class="highlighter-rouge">lsmod</code>  - Lista informa√ß√µes sobre m√≥dulos carregados</li>
  <li><code class="highlighter-rouge">modinfo</code> - Lista informa√ß√µes sobre um m√≥dulo</li>
  <li><code class="highlighter-rouge">modprobe</code> - Carrega, descarrega e gera relat√≥rios em m√≥dulos, e trata de suas depend√™ncias</li>
  <li><code class="highlighter-rouge">rmmod</code> - Descarrega m√≥dulos de um kernel em execu√ß√£o</li>
</ul>

<h3 id="criando-um-m√≥dulo-no-linux">Criando um m√≥dulo no Linux</h3>

<ul>
  <li>s√£o executados no espa√ßo do kernel;</li>
  <li>s√≥ podem executar fun√ß√µes definidas pelo kernel;</li>
  <li>s√£o orientados a eventos (executam uma determinada tarefa apenas quando recebem uma solicita√ß√£o);</li>
  <li>possuem uma fun√ß√£o de inicializa√ß√£o que o prepara para receber as solicita√ß√µes;</li>
  <li>possuem uma fun√ß√£o de finaliza√ß√£o que libera os recursos alocados antes da desinstala√ß√£o.</li>
</ul>

<p>Exemplo, Hello World!</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;linux/module.h&gt; 
</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"Dual BSD/GPL"</span><span class="p">);</span> 

<span class="k">static</span> <span class="kt">int</span> <span class="nf">alo_inicio</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span> 
    <span class="n">printk</span><span class="p">(</span><span class="s">"Hello World!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> 
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
<span class="p">}</span> 

<span class="k">static</span> <span class="kt">void</span> <span class="nf">alo_fim</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span> 
    <span class="n">printk</span><span class="p">(</span><span class="s">"Bye Bye!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> 
<span class="p">}</span> 

<span class="n">module_init</span><span class="p">(</span><span class="n">alo_inicio</span><span class="p">);</span> 
<span class="n">module_exit</span><span class="p">(</span><span class="n">alo_fim</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">MODULE_LICENSE()</code> ‚Äì esta macro informa a licen√ßa do m√≥dulo (no exemplo, o c√≥digo √© disponibilizado sob as licen√ßas BSD e GPL).</li>
  <li><code class="highlighter-rouge">module_init()</code> ‚Äì macro que define quais fun√ß√µes s√£o chamadas quando o m√≥dulo √© carregado. Neste exemplo, apenas a fun√ß√£o alo_inicio() √© chamada.</li>
  <li><code class="highlighter-rouge">module_exit()</code> ‚Äì macro que define quais fun√ß√µes s√£o chamadas antes do m√≥dulo ser removido. Neste exemplo, apenas a fun√ß√£o alo_fim() √© chamada.</li>
  <li><code class="highlighter-rouge">printk()</code> ‚Äì fun√ß√£o que escreve mensagens do kernel em /var/log/syslog.</li>
</ul>

<p>Para compilar e gerar o arquivo .ko do m√≥dulo, crie o arquivo Makefile.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>obj-m :<span class="o">=</span> alomundo.o 

all: 
       make <span class="nt">-C</span> /lib/modules/<span class="si">$(</span>shell <span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/build <span class="nv">M</span><span class="o">=</span><span class="si">$(</span>PWD<span class="si">)</span> modules 

clean: 
       make <span class="nt">-C</span> /lib/modules/<span class="si">$(</span>shell <span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/build <span class="nv">M</span><span class="o">=</span><span class="si">$(</span>PWD<span class="si">)</span> clean


</code></pre></div></div>
<h3 id="1-qual-a-configura√ß√£o-da-sua-m√°quina">1. Qual a configura√ß√£o da sua m√°quina?</h3>

<h3 id="2-qual-deveria-ser-a-diferen√ßa-de-tempo-entre-as-duas-rotinas-apresentadas-single-e-multithreaded">2. Qual deveria ser a diferen√ßa de tempo entre as duas rotinas apresentadas (single e multithreaded)?</h3>

<h3 id="3-qual-foi-a-diferen√ßa-no-tempo-de-execu√ß√£o-em-sua-m√°quina">3. Qual foi a diferen√ßa no tempo de execu√ß√£o em sua m√°quina?</h3>

<h3 id="4-qual-o-tempo-de-execu√ß√£o-para-a-seguinte-rotina">4. Qual o tempo de execu√ß√£o para a seguinte rotina?</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Pool</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="n">COUNT</span> <span class="o">=</span> <span class="mi">50000000</span>
<span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">while</span> <span class="n">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="n">Pool</span><span class="p">(</span><span class="n">processes</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
    <span class="n">r1</span> <span class="o">=</span> <span class="n">pool</span><span class="o">.</span><span class="n">apply_async</span><span class="p">(</span><span class="n">countdown</span><span class="p">,</span> <span class="p">[</span><span class="n">COUNT</span><span class="o">//</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">r2</span> <span class="o">=</span> <span class="n">pool</span><span class="o">.</span><span class="n">apply_async</span><span class="p">(</span><span class="n">countdown</span><span class="p">,</span> <span class="p">[</span><span class="n">COUNT</span><span class="o">//</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">pool</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">pool</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
    <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Time taken in seconds -'</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="5-o-que-difere-da-rotina-anterior-para-a-rotina-multithreaded-apresentada-que-faz-com-que-essa-diferen√ßa-no-tempo-de-execu√ß√£o-aconte√ßa">5. O que difere da rotina anterior para a rotina multithreaded apresentada, que faz com que essa diferen√ßa no tempo de execu√ß√£o aconte√ßa?</h3>

:ET