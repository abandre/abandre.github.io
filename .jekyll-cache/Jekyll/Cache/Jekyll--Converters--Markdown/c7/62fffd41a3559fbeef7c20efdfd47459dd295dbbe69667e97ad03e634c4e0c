I"æ<h2 id="sincroniza√ß√£o---sem√°foros">Sincroniza√ß√£o - Sem√°foros</h2>

<p>Os sem√°foros s√£o como contadores avan√ßados. Uma chamada <code class="language-plaintext highlighter-rouge">acquire()</code> a um sem√°foro ir√° bloquear somente depois que um n√∫mero m√°ximo de threads j√° tiver chamado <code class="language-plaintext highlighter-rouge">acquire()</code>.</p>

<p>Um contador associado diminui por cada chamada de <code class="language-plaintext highlighter-rouge">acquire()</code> feita e aumenta por cada chamada de <code class="language-plaintext highlighter-rouge">release()</code>. Um <code class="language-plaintext highlighter-rouge">ValueError</code> ocorrer√° se as chamadas de <code class="language-plaintext highlighter-rouge">release()</code> tentarem incrementar o contador al√©m de seu valor m√°ximo atribu√≠do (que √© o n√∫mero de threads que podem fazer o <code class="language-plaintext highlighter-rouge">acquire()</code> do sem√°foro antes de ocorrer o bloqueio).</p>

<p>Os sem√°foros s√£o normalmente usados ‚Äã‚Äãpara limitar um recurso, como limitar um servidor para lidar com apenas 10 clientes por vez. Nesse caso, v√°rias conex√µes de thread competem por um recurso limitado (em nosso exemplo, √© o servidor).</p>

<p>O c√≥digo a seguir demonstra o problema de produtor-consumidor:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="n">g</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">incrementa</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">g</span>

    <span class="n">tmp</span> <span class="o">=</span> <span class="n">g</span>     <span class="c1"># le valor
</span>    <span class="n">tmp</span> <span class="o">+=</span> <span class="mi">1</span>    <span class="c1"># incrementa
</span>    <span class="n">g</span> <span class="o">=</span> <span class="n">tmp</span>     <span class="c1"># escreve
</span>
<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span> 
    <span class="n">thread1</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">incrementa</span><span class="p">)</span>
    <span class="n">thread1</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>

    <span class="n">thread2</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">incrementa</span><span class="p">)</span>
    <span class="n">thread2</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>

    <span class="n">thread1</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
    <span class="n">thread2</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>

    <span class="k">print</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</code></pre></div></div>

<p>Para resolver o problema de <em>Heisenbug</em> visto, uma forma seria a de transformar a fun√ß√£o de incrementar em uma regi√£o cr√≠tica. Para isso, podemos usar Locks. Para isso precisamos importar a biblioteca, e declarar uma vari√°vel de trava, juntamente com a vari√°vel global compartilhada:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Lock</span>

<span class="n">g</span><span class="o">=</span><span class="mi">0</span>
<span class="n">lock</span> <span class="o">=</span> <span class="n">Lock</span><span class="p">()</span>
</code></pre></div></div>

<p>Com isso, protegemos uma regi√£o cr√≠tica pegando a trava antes de iniciar e liberando a trava ap√≥s terminar, atrav√©s dos seguintes comandos:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
<span class="c1"># codigo da regiao critica
</span><span class="n">lock</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="exerc√≠cio">Exerc√≠cio:</h3>

<p>Acesse o seguinte <a href="https://forms.office.com/r/Pr09s3zJdh" target="_blank">link</a>, siga as instru√ß√µes e responda √†s perguntas l√°. O formul√°rio estar√° dispon√≠vel durante o hor√°rio de aula somente.</p>

<!-- https://betterprogramming.pub/synchronization-primitives-in-python-564f89fee732 -->
:ET