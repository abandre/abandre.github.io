I"u8<h2 id="sincronização---eventos-e-condições">Sincronização - Eventos e Condições</h2>

<p>Neste laboratório vamos explorar o problema de Produtor vs Consumidor visto em aula. Para tanto, utilizaremos como base o seguinte trecho de código python.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="n">fila</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">resultado</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">Consumidor</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">fila</span><span class="p">,</span> <span class="n">resultado</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">fila</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">CONSUMIDOR: processando tarefa'</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>
            <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
            <span class="n">resultado</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">fila</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">break</span>
  
<span class="k">def</span> <span class="nf">Produtor</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">fila</span><span class="p">,</span> <span class="n">resultado</span>
       
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
        <span class="n">fila</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">tempo</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">tempo</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"PRODUTOR:"</span><span class="p">,</span><span class="n">tempo</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'PRODUTOR: tarefas pendentes:'</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">fila</span><span class="p">),</span><span class="n">fila</span><span class="p">)</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'PRODUTOR: tarefas terminadas:'</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">resultado</span><span class="p">),</span><span class="n">resultado</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">fila</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
           <span class="k">break</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
   
<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span> 
    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> 
       
    <span class="n">t1</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">Consumidor</span><span class="p">)</span>
    <span class="n">t2</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">Produtor</span><span class="p">)</span>

    <span class="n">t1</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
    <span class="n">t2</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>

    <span class="n">t1</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
    <span class="n">t2</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>

    <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> 
    <span class="k">print</span><span class="p">(</span><span class="s">'Time taken in seconds -'</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>    
</code></pre></div></div>

<p>Note no código acima, que o produtor insere elementos na fila, enquanto o consumidor retira os elementos da fila e os insere em resultado. Note que, devido as velocidades diferentes entre a produção e o consumo, o produtor acaba sobrecarregando o consumidor, fazendo com que os itens vão se acumulando na fila.</p>

<h2 id="exercício-1">Exercício 1</h2>

<p>Utilizado a sincronização por evento, faça com que o Produtor não sobrecarregue o Consumidor com mais de <strong>duas</strong> tarefas pendentes.</p>

<p>Lembrando que, a primitiva de sincronização de eventos atua como um comunicador simples entre as threads. Eles são baseados em um sinalizador interno que as threads podem definir <code class="language-plaintext highlighter-rouge">set()</code> ou limpar <code class="language-plaintext highlighter-rouge">clear()</code>. Outras threads podem esperar <code class="language-plaintext highlighter-rouge">wait()</code> para que o sinalizador interno seja definido. O método <code class="language-plaintext highlighter-rouge">wait()</code> bloqueia até que o sinalizador se torne verdadeiro.</p>

<p>Python implementa eventos usando <code class="language-plaintext highlighter-rouge">threading.Event()</code></p>

<p>threading.Event() opera da seguinte forma:</p>

<ul>
  <li>no programa principal, antes da chamada das threads: <code class="language-plaintext highlighter-rouge">evento = threading.Event()</code></li>
  <li>uma thread pode dormir até que um evento aconteça: <code class="language-plaintext highlighter-rouge">evento.wait()</code></li>
  <li>uma thread pode acordar a thread que estava dormindo gerando um evento: <code class="language-plaintext highlighter-rouge">evento.set()</code></li>
  <li>após gerar o evento, ele pode ser removido para travar a thread caso ela chame wait novamente: <code class="language-plaintext highlighter-rouge">evento.clear()</code></li>
</ul>

<h2 id="exercício-2">Exercício 2</h2>

<p>Crie um segundo produtor na solução gerada para o exercício 3. Faça com que o segundo produtor crie tarefas com os números 11 até 20, como a seguir.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">Produtor2</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">fila</span><span class="p">,</span> <span class="n">resultado</span>
       
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">20</span><span class="p">):</span>
        <span class="n">fila</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">tempo</span><span class="o">=</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">tempo</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">PRODUTOR2:"</span><span class="p">,</span><span class="n">tempo</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'PRODUTOR2: tarefas pendentes:'</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">fila</span><span class="p">),</span><span class="n">fila</span><span class="p">)</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'PRODUTOR2: tarefas terminadas:'</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">resultado</span><span class="p">),</span><span class="n">resultado</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">fila</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
           <span class="k">break</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="a-utilizado-a-sincronização-por-evento-faça-com-que-os-produtores-não-sobrecarregue-o-consumidor-com-mais-de-duas-tarefas-pendentes">a) Utilizado a sincronização por evento, faça com que os produtores não sobrecarregue o consumidor com mais de duas tarefas pendentes.</h3>

<h3 id="b-responda-a-pergunta-o-evento-acorda-um-ou-os-dois-produtores-simultaneamente">b) Responda a pergunta: o evento acorda um ou os dois produtores simultaneamente?</h3>

<h3 id="c-substitua-o-mecanismo-de-evento-por-condição-e-verifique-novamente-se-os-dois-produtores-são-acordados-simultaneamente-através-do-método-notify">c) Substitua o mecanismo de Evento por Condição e verifique novamente se os dois produtores são acordados simultaneamente (através do método <code class="language-plaintext highlighter-rouge">notify</code>).</h3>

<p>Lembrando que um objeto <code class="language-plaintext highlighter-rouge">Condition</code> é simplesmente uma versão mais avançada do objeto <code class="language-plaintext highlighter-rouge">Event</code>. Ele também atua como um comunicador entre threads e pode ser usado para notificar <code class="language-plaintext highlighter-rouge">notify()</code> outras threads sobre uma mudança no estado do programa. Por exemplo, pode ser usado para sinalizar a disponibilidade de um recurso para consumo. Outras threads também devem adquirir <code class="language-plaintext highlighter-rouge">acquire()</code> a condição (e, portanto, seu bloqueio relacionado) antes de esperar <code class="language-plaintext highlighter-rouge">wait()</code> que a condição seja satisfeita. Além disso, um encadeamento deve liberar <code class="language-plaintext highlighter-rouge">release()</code> uma condição depois de concluir as ações relacionadas, para que outras threads possam adquirir a condição para seus propósitos.</p>

<p>Python implementa condições usando <code class="language-plaintext highlighter-rouge">threading.Condition()</code>.</p>

<ul>
  <li>no programa principal, antes da chamada das threads: <code class="language-plaintext highlighter-rouge">condition = threading.Condition()</code></li>
  <li>uma ou mais threads entram em estado de espera:</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">condition</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
<span class="n">condition</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
<span class="n">condition</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>o programa principal ou outra thread pode acordar todas as threads simultaneamente:</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">condition</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
<span class="n">condition</span><span class="o">.</span><span class="n">notify</span><span class="p">()</span> <span class="n">ou</span> <span class="n">condition</span><span class="o">.</span><span class="n">notifyAll</span><span class="p">()</span>
<span class="n">condition</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">notify</code> acorda uma única thread e <code class="language-plaintext highlighter-rouge">notifyAll</code> todas as threads simultaneamente.</li>
</ul>

<!-- https://www.ppgia.pucpr.br/~jamhour/Pessoal/Graduacao/Ciencia/Python/SincProcessos.html -->
:ET