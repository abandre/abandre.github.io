I"Œ#<h2 id="aloca√ß√£o-de-mem√≥ria-principal">Aloca√ß√£o de mem√≥ria principal</h2>

<p><strong>Objetivo:</strong> Simular e avaliar diferentes t√©cnicas de aloca√ß√£o/libera√ß√£o de mem√≥ria: first fit, best fit, worst fit.  Usando lista encadeada para gerenciamento de mem√≥ria.</p>

<p>Suponha que a mem√≥ria seja de 256 KB e esteja dividida em unidades de 2 KB cada. Um processo pode solicitar entre 3 e 10 unidades de mem√≥ria. Sua simula√ß√£o consiste em tr√™s componentes: <strong>componente de mem√≥ria</strong> que implementa uma aloca√ß√£o/libera√ß√£o espec√≠fica por t√©cnica; <strong>componente de gera√ß√£o de solicita√ß√£o</strong> que gera solicita√ß√µes de aloca√ß√£o/libera√ß√£o; e <strong>componente de relat√≥rio</strong> de estat√≠sticas que imprime as estat√≠sticas relevantes.</p>

<p>A <strong>componente de mem√≥ria</strong> exporta as seguintes fun√ß√µes:</p>
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">alocate_mem(process_id, num_units)</code>: aloca <em>num_units</em> unidades de mem√≥ria para um processo cujo id √© <em>process_id</em>. Se for bem sucedido, retorna 1. Caso contr√°rio, retorna -1.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">deallocate_mem(process_id)</code>: desaloca a mem√≥ria alocada para o processo cujo id √© <em>process_id</em>. Ele retorna 1, se for bem-sucedido, caso contr√°rio, -1.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">fragment_count()</code>: retorna o n√∫mero de buracos (fragmentos de tamanhos 1 ou 2 unidades).</p>
  </li>
</ul>

<p>Voc√™ implementar√° um componente de mem√≥ria separado para cada t√©cnica de aloca√ß√£o/libera√ß√£o. Para solicita√ß√µes de aloca√ß√£o, o componente especifica o id do processo do processo para o qual a mem√≥ria √© solicitada, bem como o n√∫mero de unidades de mem√≥ria sendo solicitada. Para esta simula√ß√£o, suponha que a mem√≥ria seja solicitada para cada processo apenas uma vez. Para solicita√ß√µes de desaloca√ß√£o, o componente especifica o id do processo do processo cuja mem√≥ria deve ser desalocada. Para esta simula√ß√£o, suponha que toda a mem√≥ria alocada para um processo √© desalocada em um request de desaloca√ß√£o. Voc√™ pode gerar essas solicita√ß√µes aleatoriamente.</p>

<p>Existem tr√™s par√¢metros de desempenho que sua simula√ß√£o deve calcular para cada
t√©cnica: n√∫mero m√©dio de fragmentos externos, tempo m√©dio de aloca√ß√£o em termos de n√∫mero m√©dio de n√≥s percorridos na aloca√ß√£o, e a porcentagem de vezes que um pedido de aloca√ß√£o negado.</p>

<p>Gere 10.000 solicita√ß√µes usando o <strong>componente de gera√ß√£o de solicita√ß√£o</strong> e, para cada solicita√ß√£o, invocar a fun√ß√£o apropriada do componente de mem√≥ria para cada uma das t√©cnica de aloca√ß√£o/libera√ß√£o. Ap√≥s cada solicita√ß√£o, atualize as tr√™s performances par√¢metros para cada uma das t√©cnicas.</p>

<p>O <strong>componente de relat√≥rio de estat√≠sticas</strong> imprime o valor dos tr√™s par√¢metros para todos os quatro t√©cnicas no final.</p>

<p>Entregar o relat√≥rio final de compara√ß√£o entre as t√©cnicas utilizadas, juntamente com uma avalia√ß√£o cr√≠tica desse resultado.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span> <span class="k">as</span> <span class="n">rnd</span>

<span class="k">def</span> <span class="nf">inicializa</span><span class="p">(</span><span class="n">tamanho</span><span class="p">):</span>
	<span class="n">memoria</span><span class="o">=</span><span class="p">[]</span>
	<span class="n">node</span> <span class="o">=</span> <span class="p">{</span><span class="s">'tipo'</span><span class="p">:</span><span class="s">'H'</span><span class="p">,</span><span class="s">'inicio'</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="s">'tamanho'</span><span class="p">:</span><span class="n">tamanho</span><span class="p">,</span><span class="s">'pid'</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span>
	<span class="n">memoria</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>

	<span class="k">return</span> <span class="n">memoria</span>

<span class="k">def</span> <span class="nf">inicializaAleatorio</span><span class="p">(</span><span class="n">tamanho</span><span class="p">):</span>
	<span class="n">posicao</span><span class="o">=</span><span class="mi">0</span>
	<span class="n">memoria</span><span class="o">=</span><span class="p">[]</span>
	<span class="n">i</span><span class="o">=</span><span class="mi">0</span>
	<span class="n">p</span><span class="o">=</span><span class="mi">1</span>
	<span class="k">while</span> <span class="n">posicao</span><span class="o">&lt;</span><span class="n">tamanho</span><span class="p">:</span>
		<span class="n">tam</span><span class="o">=</span><span class="n">rnd</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">posicao</span><span class="o">+</span><span class="n">tam</span><span class="o">&gt;</span><span class="n">tamanho</span><span class="p">:</span>
			<span class="n">tam</span><span class="o">=</span><span class="n">tamanho</span><span class="o">-</span><span class="n">posicao</span>

		<span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
			<span class="n">tipo</span><span class="o">=</span><span class="s">'P'</span>
			<span class="n">pid</span><span class="o">=</span><span class="n">p</span>
			<span class="n">p</span><span class="o">+=</span><span class="mi">1</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="n">tipo</span><span class="o">=</span><span class="s">'H'</span>
			<span class="n">pid</span><span class="o">=-</span><span class="mi">1</span>

		<span class="n">node</span> <span class="o">=</span> <span class="p">{</span><span class="s">'tipo'</span><span class="p">:</span><span class="n">tipo</span><span class="p">,</span><span class="s">'inicio'</span><span class="p">:</span><span class="n">posicao</span><span class="p">,</span><span class="s">'tamanho'</span><span class="p">:</span><span class="n">tam</span><span class="p">,</span><span class="s">'pid'</span><span class="p">:</span><span class="n">pid</span><span class="p">}</span>
		<span class="n">memoria</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
		<span class="n">posicao</span><span class="o">+=</span><span class="n">tam</span>
		<span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

	<span class="k">return</span> <span class="n">memoria</span>

<span class="k">def</span> <span class="nf">deallocate_mem</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span><span class="n">memoria</span><span class="p">):</span> <span class="c1"># TODO
</span>	<span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">memoria</span><span class="p">:</span>
		<span class="k">if</span> <span class="n">node</span><span class="p">[</span><span class="s">'pid'</span><span class="p">]</span><span class="o">==</span><span class="n">pid</span><span class="p">:</span>
			<span class="n">index</span><span class="o">=</span><span class="n">memoria</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"node anterior:"</span><span class="p">,</span><span class="n">memoria</span><span class="p">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"node atual:"</span><span class="p">,</span><span class="n">memoria</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
			<span class="k">print</span><span class="p">(</span><span class="s">"node posterior:"</span><span class="p">,</span><span class="n">memoria</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
		<span class="c1"># completar o c√≥digo
</span>
<span class="n">memoria</span> <span class="o">=</span> <span class="n">inicializaAleatorio</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
<span class="n">deallocate_mem</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="n">memoria</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">memoria</span><span class="p">)</span>
</code></pre></div></div>
:ET