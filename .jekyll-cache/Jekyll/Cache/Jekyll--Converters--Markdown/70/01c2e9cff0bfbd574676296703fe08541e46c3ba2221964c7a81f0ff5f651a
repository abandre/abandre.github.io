I"ı<h2 id="multiprocessing-vs-multithreading">Multiprocessing vs Multithreading</h2>

<p>Nessa atividade iremos exercitar os conceitos vistos at√© ent√£o nas aulas anteriores. A seguir, um breve resumo:</p>

<ul>
  <li>
    <p>Um <strong>programa</strong> √© um arquivo execut√°vel que consiste em um conjunto de instru√ß√µes para realizar alguma tarefa e geralmente fica armazenado no disco do seu computador.</p>
  </li>
  <li>
    <p>Um <strong>processo</strong> √© o que chamamos de programa que foi carregado na mem√≥ria com todos os recursos de que precisa para operar. Ele tem seu pr√≥prio espa√ßo de mem√≥ria.</p>
  </li>
  <li>
    <p>Uma <strong>thread</strong> √© a unidade de execu√ß√£o dentro de um processo. Um processo pode ter v√°rias threads em execu√ß√£o como parte dele, onde cada thread usa o espa√ßo de mem√≥ria do processo e o compartilha com outras threads.</p>
  </li>
  <li>
    <p><strong>Multithreading</strong> √© uma t√©cnica em que v√°rias threads s√£o gerados por um processo para fazer diferentes tarefas, quase ao mesmo tempo, apenas uma ap√≥s a outra. Isso d√° a ilus√£o de que os threads est√£o sendo executados em paralelo, mas na verdade s√£o executados de maneira simult√¢nea.</p>
  </li>
  <li>
    <p><strong>Multiprocessamento</strong> √© uma t√©cnica em que o paralelismo em sua forma mais verdadeira √© alcan√ßado. V√°rios processos s√£o executados em v√°rios n√∫cleos de CPU, que n√£o compartilham os recursos entre eles. Cada processo pode ter muitas threads em execu√ß√£o em seu pr√≥prio espa√ßo de mem√≥ria.</p>
  </li>
</ul>

<p>Em Python, vimos implementa√ß√µes de multiprograma√ß√£o envolvendo tanto multiprocessamento quanto multithreading. Enquanto em python cada processo tem sua pr√≥pria inst√¢ncia de interpretador Python fazendo o trabalho de execu√ß√£o das instru√ß√µes, em multithreading, o Global Interpreter Lock (GIL) impede que as threads sejam executados verdadeiramente de forma simult√¢nea.</p>

<p>Para os exerc√≠cios a seguir, usaremos duas fun√ß√µes:</p>
<ol>
  <li>Fun√ß√£o <strong>IO-Bound</strong> - dentro da fun√ß√£o IO-bound, pedimos √† CPU para ficar ociosa e esperar passar o tempo;</li>
  <li>Fun√ß√£o <strong>CPU-Bound</strong> - dentro da fun√ß√£o CPU-bound, a CPU estar√° ocupada produzindo alguns n√∫meros.</li>
</ol>

<p>A seguir est√° o trecho de c√≥digo que usaremos nos exerc√≠cios:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">time</span><span class="p">,</span> <span class="n">os</span> 
<span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span><span class="p">,</span> <span class="n">current_thread</span> 
<span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span><span class="p">,</span> <span class="n">current_process</span> 

<span class="n">COUNT</span> <span class="o">=</span> <span class="mi">200000000</span>
<span class="n">SLEEP</span> <span class="o">=</span> <span class="mi">10</span>

<span class="k">def</span> <span class="nf">io_bound</span><span class="p">(</span><span class="n">sec</span><span class="p">):</span> 
    <span class="n">pid</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span> 
    <span class="n">threadName</span> <span class="o">=</span> <span class="n">current_thread</span><span class="p">()</span><span class="o">.</span><span class="n">name</span> 
    <span class="n">processName</span> <span class="o">=</span> <span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span> 

    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">"{pid} * {processName} * {threadName} ---&gt; Start sleeping..."</span><span class="p">)</span> 
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">sec</span><span class="p">)</span> 
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">"{pid} * {processName} * {threadName} ---&gt; Finished sleeping..."</span><span class="p">)</span> 
  
<span class="k">def</span> <span class="nf">cpu_bound</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> 
    <span class="n">pid</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span> 
    <span class="n">threadName</span> <span class="o">=</span> <span class="n">current_thread</span><span class="p">()</span><span class="o">.</span><span class="n">name</span> 
    <span class="n">processName</span> <span class="o">=</span> <span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span> 
  
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">"{pid} * {processName} * {threadName} ---&gt; Start counting..."</span><span class="p">)</span> 
    <span class="k">while</span> <span class="n">n</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span> 
        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">"{pid} * {processName} * {threadName} ---&gt; Finished counting..."</span><span class="p">)</span> 
  
<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span> 
    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> 
  
    <span class="c1"># SEU CODIGO VAI AQUI 
</span>  
    <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> 
    <span class="k">print</span><span class="p">(</span><span class="s">'Time taken in seconds -'</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> 

</code></pre></div></div>

<p>Note no c√≥digo anterior, algumas fun√ß√µes bastante √∫teis em multiprograma√ß√£o em python, como <code class="language-plaintext highlighter-rouge">os.getpid()</code> que retorna qual o id do processo em que o trecho de c√≥digo est√° sendo executado. Al√©m das fun√ß√µes <code class="language-plaintext highlighter-rouge">current_thread().name</code> e <code class="language-plaintext highlighter-rouge">current_process().name</code> que imprimem o nome da thread e do processo correntes.</p>

<p>Exerc√≠cio:</p>

<p>Acesse o seguinte <a href="https://forms.office.com/r/1TnSZihJRu">link</a>, siga as instru√ß√µes e responda √†s perguntas l√°.</p>

<!-- https://www.geeksforgeeks.org/difference-between-multithreading-vs-multiprocessing-in-python/?ref=rp -->
:ET